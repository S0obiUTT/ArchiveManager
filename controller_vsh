#!/bin/bash

#########################################
#										#
#	@Author : Kevin Personnic			#
#	@Date   : 17/05/2014				#
#	@Synop  : Controller vsh			#
#										#
#########################################

#communication const messages
declare -r archNotFound="ARCHNOTFOUND"
declare -r dirNotFound="DIRNOTFOUND"

#keywords
declare -r directoryKey="directory"

#environment variables
declare -r archivesDir="archives"

function vsh_ls {
	#list a directory of an archive
	echo "command ls"
}

function vsh_cd {
	path="${cmdLineArray[3]}"

	#clean path of begining / and finishing /
	cleanPath="$(sed -e 's/\(^\/\|\/$\)//g' <<< $path)"

	#check if the targeted directory exist in the archive
	#directory="$(cat "$archivesDir/$archive" | sed -e 's/\/$//g' | grep "^$directoryKey" | grep "$cleanPath\$")"
	
	#if [[ -n "$directory" ]]
	#then
	#	echo "$path"
	#else
	#	echo "$dirNotFound"
	#fi

	# if directory is found in the archive
	if (( $(grep -c "^directory\ $cleanPath$" "$archivePath") == 0 )); then
		echo "$dirNotFound"
	fi
}

function vsh_list {
	cd "$archivesDir"

	for file in *
	do
		echo "$file"
	done
}

function vsh_cat {
	true;
}

function vsh_rm {
	true;
}

function vsh_browse {
	cmd="${cmdLineArray[2]}"
	#verifier que l'archive existe
	#sinon ARCHNOTFOUND

	case "$cmd" in
		ls )
			vsh_ls;
			;;
		cd )
			vsh_cd;
			;;
		cat )
			vsh_cat;
			;;
		rm )
			vsh_rm;
			;;
		*)
			;;
	esac
}

function vsh_extract {
	#send back the specified archive
	true;

}

read cmdLine
cmdLineArray=(${cmdLine// / })
declare action="${cmdLineArray[0]}"
archivePath="$archivesDir/${cmdLineArray[1]}"

case "$action" in
	list )
		vsh_list;
		;;
	browse )
		vsh_browse;
		;;
	extract )
		vsh_extract;
		;;
	*)
		;;
esac