#!/bin/bash
#set -x
#########################################
#										#
#	@Author : Kevin Personnic			#
#	@Date   : 17/05/2014				#
#	@Synop  : Controller vsh			#
#										#
#########################################

#communication const messages
declare -r archNotFound="ARCHNOTFOUND"
declare -r dirNotFound="DIRNOTFOUND"
declare -r dirFound="DIRFOUND"
declare -r fileNotFound="FILENOTFOUND"

#keywords
declare -r directoryKey="directory"

#environment variables
declare -r archivesDir="archives"


#check if a given directory exist
function vsh_existDir {
	#clean path of begining / and finishing /
	#cleanPath="$(sed -e "s/\(^\/\|\/$\)//g" <<< $1)"
	cleanPath="$1"

	# if directory is found in the archive
	if (( $(grep -c "^directory\ $cleanPath$" "$archivePath") == 0 )); then
		echo "0"
	else
		echo "1"
	fi
}

#check if a given archive exist
function vsh_existArch {
	found="0"

	for file in $archivesDir/*
	do
		if [[ -n $(sed -e "s/^$archivesDir\///g" <<< "$file" | grep "^$1\$") ]]; then
			found="1"
		fi
	done

	echo "$found"
}

#send back the content of a directory
function getDirContent {
	path="$(getLocalPath "$1")"
	lineStart=$(( $(grep -n $path\$ "$archivePath" | cut -d: -f1) + 1 ))
	nbLines=$(( $(tail -n +$lineStart "$archivePath" | grep -n -m 1 "@" | cut -d: -f1) - 1 ))

	echo "$(tail -n +$lineStart "$archivePath" | head -"$nbLines" )"
}

#send back a path in the archive context
function getLocalPath {
	echo "$localRoot$(sed -e "s/\(^\/\|\/$\)//g" <<< $1)"
}

#init some variables containing header informations
function initHeaderInfo {
	lineBodyStart="$(head -1 "$archivePath" | cut -d: -f2 )"
}

#list the file of a directory
function vsh_ls {

	path="$(getLocalPath "$1")"


	if ! (( $(vsh_existDir $path) )); then
		echo "$dirNotFound"
		return
	fi

	dirContent="$(getDirContent $1)"

	#à re-écrire plus proprement
	echo "$(sed -e 's/\sd.*/\//g' <<< "$dirContent" | sed -e 's/\s...x..x..x.*\|\s...x..x.*\|\s...x.*/\*/g' | sed -e 's/\s.*//g' | awk 1 ORS=' ')"
}

#move to an other directory
function vsh_cd {
	path="$(getLocalPath "$1")"

	if ! (( $(vsh_existDir $path) )); then
		echo "$dirNotFound"
		return
	fi
}

#list the available archives
function vsh_list {

	#list the files contained by the archives directory
	for file in $archivesDir/*
	do
		#clean the line before send it
		echo "$(sed -e "s/^$archivesDir\///g" <<< $file)"
	done
}

#display the content of a given file
function vsh_cat {

	#clean the given file path
	path="$(sed -e "s/\(^\/\|\/$\)//g" <<< $1)"

	#extract the filename for the path
	pathArray=(${path//'/'/ })
	fileName=${pathArray[$((( ${#pathArray[@]} - 1 )))]}

	#extract and construct the directory path containing the file
	fileDir="$(sed -e "s/\/\?$fileName\$//" <<< "$path")"

	#check if the directory exist
	if ! (( $(vsh_existDir "$(getLocalPath $fileDir)") )); then
		echo "$dirNotFound"
		return
	fi

	#get the description of the directory containing the file
	dirContent="$(getDirContent "$fileDir")"

	#check if the file exist in the directory
	if (( $(grep -c "$fileName\ " <<< "$dirContent") == 0 )); then
		echo "$fileNotFound"
		return
	fi

	#extract the line and the length of the content of the file is in the body
	fileLineStart="$(grep "$fileName\ " <<< "$dirContent" | cut -d' ' -f4)"
	fileNbLines="$(grep "$fileName\ " <<< "$dirContent" | cut -d' ' -f5)"

	#init a variable
	initHeaderInfo

	#send back the file
	echo "$(tail -n +$lineBodyStart "$archivePath" | tail -n +$fileLineStart | head -$fileNbLines)"

}

function vsh_rmFile {

	fileName=$1
	fileDir=$2

	#get the description of the directory containing the file
	dirContent="$(getDirContent "$fileDir")"

	#extract the line and the length of the content of the file is in the body
	fileLineStart="$(grep "$fileName\ " <<< "$dirContent" | cut -d' ' -f4)"
	fileNbLines="$(grep "$fileName\ " <<< "$dirContent" | cut -d' ' -f5)"

	#init a variable
	initHeaderInfo

	#delete file's content
	sed -i "$(( $lineBodyStart + $fileLineStart - 1 )),$(( $lineBodyStart + $fileLineStart + $fileNbLines - 1 ))d" "$archivePath"

	#delete file's reference in the header
	sed -i "/^.\+\ -[r,w,x,-]\+\ [0-9]\+\ $fileLineStart\ $fileNbLines/d" "$archivePath"

	#update the length of the header
	sed -i "s/:[0-9]\+\$/:$(( $lineBodyStart - 1 ))/" "$archivePath"

	#update each file's starting line with the new value when itss needed

	while read line
	do
		#ge the old strating line of the file
		lineStart="$(cut -d' ' -f4 <<< "$line")"
		#check if it need to be updated
		if (( $lineStart > $fileLineStart )); then
			#get the new starting line for the reference
			newLineStart=$(( $lineStart - $fileNbLines ))
			#get the line number of the reference
			lineRefFile="$(cut -d: -f1 <<< "$line")"
			#edit the line
			sed -i ""$lineRefFile"s/\(\ [0-9]\+\ \)\($lineStart\)\(\ [0-9]\+\)/\1$newLineStart\3/" "$archivePath"
		fi

	done <<< "$(grep -n "^.\+\ -[r,w,x,-]\+\ [0-9]\+\ [0-9]\+\ [0-9]\+" "$archivePath")"

}

function vsh_rmDir {

	dirContent="$(getDirContent "$1")"

	#for each element of the directory cleaned from useless informations
	lsElem=$(sed -e "s/\ .\+\$//g" <<< "$dirContent")
	for elem in $lsElem
	do
		echo "putede:$elem"
		#ask rm for the element
		vsh_rm "$1/$elem"

	done

	echo "jesuissorti"

	#delete his own reference
		#get the starting line of the description containing the dir
	parentDir=$(sed -e "s/[^/]\+$//" <<< $1 | sed -e "s/\(^\/\|\/$\)//g")
	parentDescLn=$(grep -n $(getLocalPath $parentDir)\$ "$archivePath" | cut -d: -f1)
		#get the line of the ref in the desciption
	echo "putepute:$1"
	echo "putesalope:$(sed -e "s/.\+\///" <<< "$1")"
	descLine=$(grep -n "$(sed -e "s/.\+\///" <<< "$1")" <<< "$(getDirContent $parentDir)" | cut -d: -f1)
		#delete the line
	sed -i "$(( $parentDescLn + $descLine ))d" "$archivePath"

	#get the line of the directory description
	lineStartDel=$(grep -n "^directory\ $(getLocalPath $1)$" "$archivePath" | cut -d: -f1)
	#delete the directory lines description
	sed -i "$lineStartDel,$(( $lineStartDel + 1 ))d" "$archivePath"

	#refresh the header info
	initHeaderInfo
	#update the length of the header
	sed -i "s/:[0-9]\+\$/:$(( $lineBodyStart - 3 ))/" "$archivePath"
}

function vsh_rm {

	#clean the given file path
	path="$(sed -e "s/\(^\/\|\/$\)//g" <<< $1)"

	#if the given path is a directory
	if (( $(vsh_existDir "$(getLocalPath "$path")") )); then
		vsh_rmDir "$path"
	else

		#extract the filename for the path
		pathArray=(${path//'/'/ })
		fileName=${pathArray[$((( ${#pathArray[@]} - 1 )))]}

		#extract and construct the directory path containing the file
		fileDir="$(sed -e "s/\/\?$fileName\$//" <<< "$path")"

		#check if the directory exist
		if ! (( $(vsh_existDir "$(getLocalPath $fileDir)") )); then
			echo "$dirNotFound"
			return
		fi

		#get the description of the directory containing the file
		dirContent="$(getDirContent "$fileDir")"

		#check if the file exist in the directory
		if (( $(grep -c "$fileName\ " <<< "$dirContent") == 0 )); then
			echo "$fileNotFound"
			return
		fi

		vsh_rmFile "$fileName" "$fileDir"
	fi

}

function vsh_browse {
	cmd="${cmdLineArray[2]}"

	#check if the archive exist
	if ! (( $(vsh_existArch "${cmdLineArray[1]}") )); then
		echo "$archNotFound"
		return
	fi

	#extract the value of the / in the context of the archive
	localRoot="$(grep -m 1 "$directoryKey" "$archivePath" | sed -e "s/$directoryKey\ //g")"
	#localRoot="$(grep -m 1 "$directoryKey" "$archivePath" | sed -e "s/\($directoryKey\ \|\/$\)//g")"

	case "$cmd" in
		ls )
			vsh_ls ${cmdLineArray[3]};
			;;
		cd )
			vsh_cd ${cmdLineArray[3]};
			;;
		cat )
			vsh_cat ${cmdLineArray[3]};
			;;
		rm )
			vsh_rm ${cmdLineArray[3]};
			;;
		*)
			;;
	esac
}

function vsh_extract {
	#check if the archive exist
	if ! (( $(vsh_existArch ${cmdLineArray[1]}) )); then
		echo "$archNotFound"
		return
	fi

	#return all the content of the archive to the client
	cat $archivePath
}

read cmdLine
cmdLineArray=(${cmdLine// / })

declare action="${cmdLineArray[0]}"
declare localRoot=""
declare lineBodyStart=""
declare archivePath="$archivesDir/${cmdLineArray[1]}"

case "$action" in
	list )
		vsh_list;
		;;
	browse )
		vsh_browse;
		;;
	extract )
		vsh_extract;
		;;
	*)
		;;
esac